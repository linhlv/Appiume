var apm = apm || {};
(function ($) {

    /* Application paths *****************************************/

    //Current application root path (including virtual directory if exists).
    apm.appPath = apm.appPath || '/';

    apm.pageLoadTime = new Date();

    //Converts given path to absolute path using apm.appPath variable.
    apm.toAbsAppPath = function (path) {
        if (path.indexOf('/') == 0) {
            path = path.substring(1);
        }

        return apm.appPath + path;
    };

    /* LOCALIZATION ***********************************************/
    //Implements Localization API that simplifies usage of localization scripts generated by Abp.

    apm.localization = apm.localization || {};

    apm.localization.localize = function (key, sourceName) {
        sourceName = sourceName || apm.localization.defaultSourceName;

        var source = apm.localization.values[sourceName];

        if (!source) {
            apm.log.warn('Could not find localization source: ' + sourceName);
            return key;
        }

        var value = source[key];
        if (value == undefined) {
            return key;
        }

        var copiedArguments = Array.prototype.slice.call(arguments, 0);
        copiedArguments.splice(1, 1);
        copiedArguments[0] = value;

        return apm.utils.formatString.apply(this, copiedArguments);
    };

    apm.localization.getSource = function (sourceName) {
        return function (key) {
            var copiedArguments = Array.prototype.slice.call(arguments, 0);
            copiedArguments.splice(1, 0, sourceName);
            return apm.localization.localize.apply(this, copiedArguments);
        };
    };

    apm.localization.isCurrentCulture = function (name) {
        return apm.localization.currentCulture
            && apm.localization.currentCulture.name
            && apm.localization.currentCulture.name.indexOf(name) == 0;
    };

    apm.localization.defaultSourceName = undefined;
    apm.localization.apmWeb = apm.localization.getSource('ApmWeb');

    /* AUTHORIZATION **********************************************/
    //Implements Authorization API that simplifies usage of authorization scripts generated by Abp.

    apm.auth = apm.auth || {};

    apm.auth.allPermissions = apm.auth.allPermissions || {};

    apm.auth.grantedPermissions = apm.auth.grantedPermissions || {};

    //Deprecated. Use apm.auth.isGranted instead.
    apm.auth.hasPermission = function (permissionName) {
        return apm.auth.isGranted.apply(this, arguments);
    };

    //Deprecated. Use apm.auth.isAnyGranted instead.
    apm.auth.hasAnyOfPermissions = function () {
        return apm.auth.isAnyGranted.apply(this, arguments);
    };

    //Deprecated. Use apm.auth.areAllGranted instead.
    apm.auth.hasAllOfPermissions = function () {
        return apm.auth.areAllGranted.apply(this, arguments);
    };

    apm.auth.isGranted = function (permissionName) {
        return apm.auth.allPermissions[permissionName] != undefined && apm.auth.grantedPermissions[permissionName] != undefined;
    };

    apm.auth.isAnyGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (apm.auth.isGranted(arguments[i])) {
                return true;
            }
        }

        return false;
    };

    apm.auth.areAllGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (!apm.auth.isGranted(arguments[i])) {
                return false;
            }
        }

        return true;
    };

    /* FEATURE SYSTEM *********************************************/
    //Implements Features API that simplifies usage of feature scripts generated by Abp.

    apm.features = apm.features || {};

    apm.features.allFeatures = apm.features.allFeatures || {};

    apm.features.get = function (name) {
        return apm.features.allFeatures[name];
    }

    apm.features.getValue = function (name) {
        var feature = apm.features.get(name);
        if (feature == undefined) {
            return undefined;
        }

        return feature.value;
    }

    apm.features.isEnabled = function (name) {
        var value = apm.features.getValue(name);
        return value == 'true' || value == 'True';
    }

    /* SETTINGS **************************************************/
    //Implements Settings API that simplifies usage of setting scripts generated by Abp.

    apm.setting = apm.setting || {};

    apm.setting.values = apm.setting.values || {};

    apm.setting.get = function (name) {
        return apm.setting.values[name];
    };

    apm.setting.getBoolean = function (name) {
        var value = apm.setting.get(name);
        return value == 'true' || value == 'True';
    };

    apm.setting.getInt = function (name) {
        return parseInt(apm.setting.values[name]);
    };

    /* REALTIME NOTIFICATIONS ************************************/

    apm.notifications = apm.notifications || {};

    apm.notifications.severity = {
        INFO: 0,
        SUCCESS: 1,
        WARN: 2,
        ERROR: 3,
        FATAL: 4
    };

    apm.notifications.userNotificationState = {
        UNREAD: 0,
        READ: 1
    };

    apm.notifications.getUserNotificationStateAsString = function (userNotificationState) {
        switch (userNotificationState) {
            case apm.notifications.userNotificationState.READ:
                return 'READ';
            case apm.notifications.userNotificationState.UNREAD:
                return 'UNREAD';
            default:
                apm.log.warn('Unknown user notification state value: ' + userNotificationState)
                return '?';
        }
    };

    apm.notifications.getUiNotifyFuncBySeverity = function (severity) {
        switch (severity) {
            case apm.notifications.severity.SUCCESS:
                return apm.notify.success;
            case apm.notifications.severity.WARN:
                return apm.notify.warn;
            case apm.notifications.severity.ERROR:
                return apm.notify.error;
            case apm.notifications.severity.FATAL:
                return apm.notify.error;
            case apm.notifications.severity.INFO:
            default:
                return apm.notify.info;
        }
    };

    apm.notifications.messageFormatters = {};

    apm.notifications.messageFormatters['apm.Notifications.MessageNotificationData'] = function (userNotification) {
        return userNotification.notification.data.message;
    };

    apm.notifications.messageFormatters['apm.Notifications.LocalizableMessageNotificationData'] = function (userNotification) {
        var localizedMessage = apm.localization.localize(
            userNotification.notification.data.message.name,
            userNotification.notification.data.message.sourceName
        );

        if (userNotification.notification.data.properties) {
            if ($) {
                //Prefer to use jQuery if possible
                $.each(userNotification.notification.data.properties, function (key, value) {
                    localizedMessage = localizedMessage.replace('{' + key + '}', value);
                });
            } else {
                //alternative for $.each
                var properties = Object.keys(userNotification.notification.data.properties);
                for (var i = 0; i < properties.length; i++) {
                    localizedMessage = localizedMessage.replace('{' + properties[i] + '}', userNotification.notification.data.properties[properties[i]]);
                }
            }
        }

        return localizedMessage;
    };

    apm.notifications.getFormattedMessageFromUserNotification = function (userNotification) {
        var formatter = apm.notifications.messageFormatters[userNotification.notification.data.type];
        if (!formatter) {
            apm.log.warn('No message formatter defined for given data type: ' + userNotification.notification.data.type)
            return '?';
        }

        if (!apm.utils.isFunction(formatter)) {
            apm.log.warn('Message formatter should be a function! It is invalid for data type: ' + userNotification.notification.data.type)
            return '?';
        }

        return formatter(userNotification);
    }

    apm.notifications.showUiNotifyForUserNotification = function (userNotification, options) {
        var message = apm.notifications.getFormattedMessageFromUserNotification(userNotification);
        var uiNotifyFunc = apm.notifications.getUiNotifyFuncBySeverity(userNotification.notification.severity);
        uiNotifyFunc(message, undefined, options);
    }

    /* LOGGING ***************************************************/
    //Implements Logging API that provides secure & controlled usage of console.log

    apm.log = apm.log || {};

    apm.log.levels = {
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        FATAL: 5
    };

    apm.log.level = apm.log.levels.DEBUG;

    apm.log.log = function (logObject, logLevel) {
        if (!window.console || !window.console.log) {
            return;
        }

        if (logLevel != undefined && logLevel < apm.log.level) {
            return;
        }

        console.log(logObject);
    };

    apm.log.debug = function (logObject) {
        apm.log.log("DEBUG: ", apm.log.levels.DEBUG);
        apm.log.log(logObject, apm.log.levels.DEBUG);
    };

    apm.log.info = function (logObject) {
        apm.log.log("INFO: ", apm.log.levels.INFO);
        apm.log.log(logObject, apm.log.levels.INFO);
    };

    apm.log.warn = function (logObject) {
        apm.log.log("WARN: ", apm.log.levels.WARN);
        apm.log.log(logObject, apm.log.levels.WARN);
    };

    apm.log.error = function (logObject) {
        apm.log.log("ERROR: ", apm.log.levels.ERROR);
        apm.log.log(logObject, apm.log.levels.ERROR);
    };

    apm.log.fatal = function (logObject) {
        apm.log.log("FATAL: ", apm.log.levels.FATAL);
        apm.log.log(logObject, apm.log.levels.FATAL);
    };

    /* NOTIFICATION *********************************************/
    //Defines Notification API, not implements it

    apm.notify = apm.notify || {};

    apm.notify.success = function (message, title, options) {
        apm.log.warn('apm.notify.success is not implemented!');
    };

    apm.notify.info = function (message, title, options) {
        apm.log.warn('apm.notify.info is not implemented!');
    };

    apm.notify.warn = function (message, title, options) {
        apm.log.warn('apm.notify.warn is not implemented!');
    };

    apm.notify.error = function (message, title, options) {
        apm.log.warn('apm.notify.error is not implemented!');
    };

    /* MESSAGE **************************************************/
    //Defines Message API, not implements it

    apm.message = apm.message || {};

    var showMessage = function (message, title) {
        alert((title || '') + ' ' + message);

        if (!$) {
            apm.log.warn('apm.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    apm.message.info = function (message, title) {
        apm.log.warn('apm.message.info is not implemented!');
        return showMessage(message, title);
    };

    apm.message.success = function (message, title) {
        apm.log.warn('apm.message.success is not implemented!');
        return showMessage(message, title);
    };

    apm.message.warn = function (message, title) {
        apm.log.warn('apm.message.warn is not implemented!');
        return showMessage(message, title);
    };

    apm.message.error = function (message, title) {
        apm.log.warn('apm.message.error is not implemented!');
        return showMessage(message, title);
    };

    apm.message.confirm = function (message, titleOrCallback, callback) {
        apm.log.warn('apm.message.confirm is not implemented!');

        if (titleOrCallback && !(typeof titleOrCallback == 'string')) {
            callback = titleOrCallback;
        }

        var result = confirm(message);
        callback && callback(result);

        if (!$) {
            apm.log.warn('apm.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    /* UI *******************************************************/

    apm.ui = apm.ui || {};

    /* UI BLOCK */
    //Defines UI Block API, not implements it

    apm.ui.block = function (elm) {
        apm.log.warn('apm.ui.block is not implemented!');
    };

    apm.ui.unblock = function (elm) {
        apm.log.warn('apm.ui.unblock is not implemented!');
    };

    /* UI BUSY */
    //Defines UI Busy API, not implements it

    apm.ui.setBusy = function (elm, optionsOrPromise) {
        apm.log.warn('apm.ui.setBusy is not implemented!');
    };

    apm.ui.clearBusy = function (elm) {
        apm.log.warn('apm.ui.clearBusy is not implemented!');
    };

    /* SIMPLE EVENT BUS *****************************************/

    apm.event = (function () {

        var _callbacks = {};

        var on = function (eventName, callback) {
            if (!_callbacks[eventName]) {
                _callbacks[eventName] = [];
            }

            _callbacks[eventName].push(callback);
        };

        var off = function (eventName, callback) {
            var callbacks = _callbacks[eventName];
            if (!callbacks) {
                return;
            }

            var index = -1;
            for (var i = 0; i < callbacks.length; i++) {
                if (callbacks[i] === callback) {
                    index = i;
                    break;
                }
            }

            if (index < 0) {
                return;
            }

            _callbacks[eventName].splice(index, 1);
        };

        var trigger = function (eventName) {
            var callbacks = _callbacks[eventName];
            if (!callbacks || !callbacks.length) {
                return;
            }

            var args = Array.prototype.slice.call(arguments, 1);
            for (var i = 0; i < callbacks.length; i++) {
                callbacks[i].apply(this, args);
            }
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            on: on,
            off: off,
            trigger: trigger
        };
    })();


    /* UTILS ***************************************************/

    apm.utils = apm.utils || {};

    /* Creates a name namespace.
    *  Example:
    *  var taskService = apm.utils.createNamespace(getz, 'services.task');
    *  taskService will be equal to apm.services.task
    *  first argument (root) must be defined first
    ************************************************************/
    apm.utils.createNamespace = function (root, ns) {
        var parts = ns.split('.');
        for (var i = 0; i < parts.length; i++) {
            if (typeof root[parts[i]] == 'undefined') {
                root[parts[i]] = {};
            }

            root = root[parts[i]];
        }

        return root;
    };

    /* Find and replaces a string (search) to another string (replacement) in
    *  given string (str).
    *  Example:
    *  apm.utils.replaceAll('This is a test string', 'is', 'X') = 'ThX X a test string'
    ************************************************************/
    apm.utils.replaceAll = function (str, search, replacement) {
        var fix = search.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        return str.replace(new RegExp(fix, 'g'), replacement);
    };
    
    /* Formats a string just like string.format in C#.
    *  Example:
    *  apm.utils.formatString('Hello {0}','Tuana') = 'Hello Tuana'
    ************************************************************/
    apm.utils.formatString = function () {
        if (arguments.length < 1) {
            return null;
        }

        var str = arguments[0];

        for (var i = 1; i < arguments.length; i++) {
            var placeHolder = '{' + (i - 1) + '}';
            str = apm.utils.replaceAll(str, placeHolder, arguments[i]);
        }

        return str;
    };

    apm.utils.toPascalCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toUpperCase();
        }

        return str.charAt(0).toUpperCase() + str.substr(1);
    }

    apm.utils.toCamelCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toLowerCase();
        }

        return str.charAt(0).toLowerCase() + str.substr(1);
    }

    apm.utils.truncateString = function (str, maxLength) {
        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        return str.substr(0, maxLength);
    };

    apm.utils.truncateStringWithPostfix = function (str, maxLength, postfix) {
        postfix = postfix || '...';

        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        if (maxLength <= postfix.length) {
            return postfix.substr(0, maxLength);
        }

        return str.substr(0, maxLength - postfix.length) + postfix;
    };

    apm.utils.isFunction = function (obj) {
        if ($) {
            //Prefer to use jQuery if possible
            return $.isFunction(obj);
        }

        //alternative for $.isFunction
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };

    /* TIMING *****************************************/
    apm.timing = apm.timing || {};

    apm.timing.utcClockProvider = (function () {

        var toUtc = function (date) {
            return Date.UTC(
                date.getUTCFullYear()
                , date.getUTCMonth()
                , date.getUTCDate()
                , date.getUTCHours()
                , date.getUTCMinutes()
                , date.getUTCSeconds()
                , date.getUTCMilliseconds()
            );
        }

        var now = function () {
            return new Date();
        };

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return new Date(toUtc(date));
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    apm.timing.localClockProvider = (function () {

        var toLocal = function (date) {
            return new Date(
                date.getFullYear()
                , date.getMonth()
                , date.getDate()
                , date.getHours()
                , date.getMinutes()
                , date.getSeconds()
                , date.getMilliseconds()
            );
        }

        var now = function () {
            return toLocal(new Date());
        }

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return toLocal(date);
        }

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    apm.timing.unspecifiedClockProvider = (function () {

        var now = function () {
            return new Date();
        }

        var normalize = function (date) {
            return date;
        }

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    apm.timing.convertToUserTimezone = function (date) {
        var localTime = date.getTime();
        var utcTime = localTime + (date.getTimezoneOffset() * 60000);
        var targetTime = parseInt(utcTime) + parseInt(apm.timing.timeZoneInfo.windows.currentUtcOffsetInMilliseconds);
        return new Date(targetTime);
    };

    /* CLOCK *****************************************/
    apm.clock = apm.clock || {};

    apm.clock.now = function () {
        if (apm.clock.provider) {
            return apm.clock.provider.now();
        }

        return new Date();
    }

    apm.clock.normalize = function (date) {
        if (apm.clock.provider) {
            return apm.clock.provider.normalize(date);
        }

        return date;
    }

    apm.clock.provider = apm.timing.unspecifiedClockProvider;

})(jQuery);
